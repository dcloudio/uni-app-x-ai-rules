---
description: uniCloud云开发规则和最佳实践 - 云对象优先
globs: *.js,*.ts,*.json
alwaysApply: false
---
# uniCloud 云开发规则

## 云开发环境
- uniCloud是DCloud提供的云开发平台，支持云对象、云函数、云数据库、云存储等。
- 支持阿里云和腾讯云，推荐使用阿里云服务空间。
- **重要变化**: 现在推荐使用云对象代替传统云函数，享受更好的性能和开发体验。
- 开发时使用本地调试，发布时上传到云端。

## 云对象开发（推荐）

### 1. 云对象简介
云对象是uniCloud推荐的新一代云端代码组织方式，**官方明确表示：从云对象发布后，不再推荐使用传统云函数了**。

云对象采用全新的开发模式：
- **思路更清晰**：服务器编写API，客户端调用API，不再开发传输json的接口
- **代码更精简**：相比传统接口方式，代码行数大幅减少
- **更好的性能**：避免冷启动问题，响应更快
- **面向对象编程**：支持类和实例，代码组织更清晰
- **自动路由**：基于方法名自动路由，无需手动配置
- **更好的类型支持**：天然支持TypeScript，完整的jsdoc+语法提示
- **实例复用**：同一个云对象实例可以处理多个请求

### 2. 云对象基本结构

#### 2.1 TypeScript云对象（推荐）
```typescript
// 云对象文件：uniCloud/cloudfunctions/user-center/index.obj.ts
// 注意：TypeScript云对象入口文件为 index.obj.ts

// 类型定义
interface UserInfo {
  uid: string
  username: string
  avatar?: string
  createTime: number
}

interface GetUserOptions {
  uid: string
  includePrivate?: boolean
}

/**
 * 用户管理云对象（TypeScript版本）
 */
module.exports = {
  /**
   * 预处理方法 - 每次调用云对象方法前执行
   */
  _before(): void {
    // 统一的权限验证和初始化
    this.startTime = Date.now()
    this.userInfo = this.getCloudInfo().uniIdToken
    
    // 记录请求日志
    console.log(`[${new Date().toISOString()}] 调用方法: ${this.getMethodName()}`)
  },
  
  /**
   * 后处理方法 - 每次调用云对象方法后执行
   * @param error 执行过程中的错误
   * @param result 方法返回结果
   */
  _after(error: Error | null, result: any): any {
    const duration = Date.now() - this.startTime
    console.log(`执行耗时: ${duration}ms`)
    
    if (error) {
      console.error('方法执行错误:', error)
      return {
        errCode: error.errCode || 'SYSTEM_ERROR',
        errMsg: error.message || '系统错误'
      }
    }
    
    return result
  },
  
  /**
   * 获取用户信息
   * @param options 查询参数
   * @returns 用户信息
   */
  async getUserInfo(options: GetUserOptions): Promise<{ errCode: number; data: UserInfo }> {
    if (!options.uid) {
      throw new Error('用户ID不能为空')
    }
    
    const db = uniCloud.database()
    const userDoc = await db.collection('user_info').doc(options.uid).get()
    
    if (!userDoc.data.length) {
      throw new Error('用户不存在')
    }
    
    const userData = userDoc.data[0]
    return {
      errCode: 0,
      data: {
        uid: userData.uid,
        username: userData.username,
        avatar: userData.avatar,
        createTime: userData.createTime
      }
    }
  },
  
  /**
   * 更新用户信息
   * @param uid 用户ID
   * @param userInfo 用户信息
   * @returns 更新结果
   */
  async updateUserInfo(uid: string, userInfo: Partial<UserInfo>): Promise<{ errCode: number; data: any }> {
    // 权限验证
    this._checkPermission(uid)
    
    const db = uniCloud.database()
    const result = await db.collection('user_info').doc(uid).update({
      ...userInfo,
      update_time: Date.now()
    })
    
    return {
      errCode: 0,
      data: result
    }
  },
  
  /**
   * 私有方法 - 权限检查（以_开头的方法客户端无法调用）
   * @param uid 用户ID
   */
  _checkPermission(uid: string): void {
    if (!this.userInfo) {
      throw new Error('用户未登录')
    }
    
    if (this.userInfo.uid !== uid && !this.userInfo.role.includes('admin')) {
      throw new Error('无权限操作')
    }
  }
}
```

#### 2.2 JavaScript云对象（兼容方式）
```javascript
// 云对象文件：uniCloud/cloudfunctions/user-center/index.obj.js
// 注意：JavaScript云对象入口文件为 index.obj.js（不是index.js）

/**
 * 用户管理云对象
 */
module.exports = {
  /**
   * 预处理方法 - 每次调用云对象方法前执行
   */
  _before() {
    // 统一的权限验证和初始化
    this.startTime = Date.now()
    this.userInfo = this.getCloudInfo().uniIdToken
    
    // 记录请求日志
    console.log(`[${new Date().toISOString()}] 调用方法: ${this.getMethodName()}`)
  },
  
  /**
   * 后处理方法 - 每次调用云对象方法后执行
   * @param {Error} error 执行过程中的错误
   * @param {any} result 方法返回结果
   */
  _after(error, result) {
    const duration = Date.now() - this.startTime
    console.log(`执行耗时: ${duration}ms`)
    
    if (error) {
      console.error('方法执行错误:', error)
      // 统一错误处理，符合uniCloud响应体规范
      return {
        errCode: error.errCode || 'SYSTEM_ERROR',
        errMsg: error.message || '系统错误'
      }
    }
    
    return result
  },
  
  /**
   * 获取用户信息
   * @param {string} uid 用户ID
   * @returns {object} 用户信息
   */
  async getUserInfo(uid) {
    if (!uid) {
      throw new Error('用户ID不能为空')
    }
    
    const db = uniCloud.database()
    const userDoc = await db.collection('user_info').doc(uid).get()
    
    if (!userDoc.data.length) {
      throw new Error('用户不存在')
    }
    
    return {
      errCode: 0,
      data: userDoc.data[0]
    }
  },
  
  /**
   * 更新用户信息
   * @param {string} uid 用户ID
   * @param {object} userInfo 用户信息
   * @returns {object} 更新结果
   */
  async updateUserInfo(uid, userInfo) {
    // 权限验证
    this._checkPermission(uid)
    
    const db = uniCloud.database()
    const result = await db.collection('user_info').doc(uid).update({
      ...userInfo,
      update_time: Date.now()
    })
    
    return {
      errCode: 0,
      data: result
    }
  },
  
  /**
   * 私有方法 - 权限检查（以_开头的方法客户端无法调用）
   * @param {string} uid 用户ID
   */
  _checkPermission(uid) {
    if (!this.userInfo) {
      throw new Error('用户未登录')
    }
    
    if (this.userInfo.uid !== uid && !this.userInfo.role.includes('admin')) {
      throw new Error('无权限操作')
    }
  }
}
```

### 3. 客户端调用云对象
```javascript
// 基础调用方式
const userCenter = uniCloud.importObject('user-center')

try {
  // 调用云对象方法，自动显示loading和错误提示
  const result = await userCenter.getUserInfo('user123')
  console.log('用户信息:', result.data)
  
  // 更新用户信息
  await userCenter.updateUserInfo('user123', {
    nickname: '新昵称',
    avatar: 'http://example.com/avatar.jpg'
  })
} catch (error) {
  // 错误会自动弹窗显示，也可以自定义处理
  console.error('调用失败:', error.message)
}
```

### 4. 自动交互界面配置（HBuilderX 3.4.6+）
```javascript
// 默认配置 - 自动显示loading和错误提示
const userCenter = uniCloud.importObject('user-center')

// 自定义交互界面
const userCenterCustom = uniCloud.importObject('user-center', {
  customUI: false, // 是否取消自动展示交互界面
  loadingOptions: {
    title: '加载中...', // loading提示文字
    mask: true // 是否使用透明遮罩
  },
  errorOptions: {
    type: 'modal', // 错误展示方式：modal(弹框) | toast(消息框)
    retry: false // 是否显示重试按钮
  },
  parseSystemError({ objectName, methodName, params, errCode, errMsg }) {
    // 自定义系统错误处理
    return {
      errMsg: '系统错误，请稍后再试'
    }
  }
})

// 完全关闭自动交互界面
const userCenterSilent = uniCloud.importObject('user-center', {
  customUI: true // 关闭所有自动UI
})
```

### 5. 云对象高级特性

#### 5.1 定时触发方法
```javascript
module.exports = {
  /**
   * 定时触发方法 - 支持定时运行
   * 在uniCloud控制台配置定时器触发
   */
  async _timing() {
    console.log('定时任务执行:', new Date())
    
    // 执行定时业务逻辑
    await this._cleanExpiredData()
    
    return {
      errCode: 0,
      message: '定时任务执行成功'
    }
  },
  
  async _cleanExpiredData() {
    const db = uniCloud.database()
    const expireTime = Date.now() - 30 * 24 * 60 * 60 * 1000 // 30天前
    
    await db.collection('temp_data')
      .where({ create_time: db.command.lt(expireTime) })
      .remove()
  }
}
```

#### 5.2 云对象内置API使用
```javascript
module.exports = {
  async getRequestInfo() {
    // 获取客户端信息
    const clientInfo = this.getClientInfo()
    console.log('客户端信息:', {
      appId: clientInfo.appId,
      platform: clientInfo.platform,
      locale: clientInfo.locale
    })
    
    // 获取云端信息
    const cloudInfo = this.getCloudInfo()
    console.log('云端信息:', {
      provider: cloudInfo.provider,
      spaceId: cloudInfo.spaceId,
      functionName: cloudInfo.functionName
    })
    
    // 获取当前调用方法名
    const methodName = this.getMethodName()
    console.log('当前方法:', methodName)
    
    // 获取当前参数列表
    const params = this.getParams()
    console.log('调用参数:', params)
    
    // 获取请求ID
    const requestId = this.getUniCloudRequestId()
    console.log('请求ID:', requestId)
    
    return {
      errCode: 0,
      data: { clientInfo, cloudInfo, methodName, params, requestId }
    }
  }
}
```

#### 5.3 多个方法共享逻辑
```javascript
// 云对象外部定义公共函数
async function validateUserData(userData) {
  if (!userData.username || !userData.email) {
    throw new Error('用户名和邮箱不能为空')
  }
  
  // 验证邮箱格式
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(userData.email)) {
    throw new Error('邮箱格式不正确')
  }
}

module.exports = {
  async addUser(userData) {
    // 调用外部公共函数
    await validateUserData(userData)
    
    const db = uniCloud.database()
    const result = await db.collection('user_info').add({
      ...userData,
      create_time: Date.now()
    })
    
    return {
      errCode: 0,
      data: { id: result.id }
    }
  },
  
  async updateUser(id, userData) {
    // 复用验证逻辑
    await validateUserData(userData)
    
    const db = uniCloud.database()
    await db.collection('user_info').doc(id).update({
      ...userData,
      update_time: Date.now()
    })
    
    return {
      errCode: 0,
      message: '更新成功'
    }
  }
}
```

#### 5.4 JSDoc+ 语法提示
```javascript
module.exports = {
  /**
   * 添加用户
   * @param {string} username 用户名
   * @param {string} email 邮箱地址
   * @param {string} password 密码
   * @param {Array<string>} roles 用户角色数组
   * @returns {object} 返回添加结果
   */
  async addUser(username, email, password, roles = ['user']) {
    if (!username || !email || !password) {
      throw new Error('用户名、邮箱和密码不能为空')
    }
    
    const db = uniCloud.database()
    const result = await db.collection('user_info').add({
      username,
      email,
      password_hash: this._hashPassword(password),
      roles,
      create_time: Date.now(),
      status: 1
    })
    
    return {
      errCode: 0,
      data: { 
        id: result.id,
        username,
        email,
        roles
      }
    }
  },
  
  /**
   * 私有方法：密码加密
   * @param {string} password 原始密码
   * @returns {string} 加密后的密码
   */
  _hashPassword(password) {
    // 实际项目中应该使用更安全的加密方式
    const crypto = require('crypto')
    return crypto.createHash('sha256').update(password).digest('hex')
  }
}
```

## 传统云函数（兼容性考虑）

### 1. 传统云函数结构（不推荐新项目使用）
```javascript
// 传统云函数入口文件 index.js
'use strict';
const db = uniCloud.database()

exports.main = async (event, context) => {
  // event 为客户端上传的参数
  // context 包含调用信息和运行状态
  
  const { action, data } = event
  
  switch (action) {
    case 'add':
      return await addData(data)
    case 'update':
      return await updateData(data)
    case 'delete':
      return await deleteData(data)
    case 'list':
      return await getList(data)
    default:
      return {
        code: 400,
        message: '无效的操作'
      }
  }
}
```

**云函数 vs 云对象对比**：

| 特性 | 传统云函数 | 云对象（推荐） |
|------|------------|----------------|
| 性能 | 存在冷启动问题 | 实例复用，性能更好 |
| 代码组织 | 单一入口，需要switch分发 | 面向对象，方法自动路由 |
| 开发体验 | 传统函数式编程 | 支持类、继承等OOP特性 |
| 类型支持 | TypeScript支持有限 | 原生TypeScript支持 |
| 调用方式 | uniCloud.callFunction | uniCloud.importObject |
| 维护性 | 代码组织相对复杂 | 代码结构清晰，易维护 |

### 2. 统一响应格式
```javascript
// 成功响应
{
  code: 0,
  message: 'success',
  data: {}
}

// 错误响应
{
  code: 400,
  message: '错误信息',
  data: null
}
```

### 3. 错误处理
```javascript
try {
  const result = await db.collection('users').get()
  return {
    code: 0,
    data: result.data
  }
} catch (error) {
  console.error('查询失败:', error)
  return {
    code: 500,
    message: '服务器内部错误'
  }
}
```

## 云数据库使用

### 1. 集合操作
```javascript
const db = uniCloud.database()
const collection = db.collection('tableName')

// 增加记录
await collection.add({
  name: '张三',
  age: 20,
  create_time: Date.now()
})

// 查询记录
const result = await collection
  .where({ status: 1 })
  .orderBy('create_time', 'desc')
  .limit(10)
  .get()

// 更新记录
await collection.doc('docId').update({
  name: '李四',
  update_time: Date.now()
})

// 删除记录
await collection.doc('docId').remove()
```

### 2. 数据库安全规则
```json
{
  "read": "doc._id == auth.uid || 'admin' in auth.role",
  "create": "auth != null",
  "update": "doc._id == auth.uid || 'admin' in auth.role",
  "delete": "'admin' in auth.role"
}
```

## 云存储使用

### 1. 文件上传
```javascript
// 客户端上传文件
uni.chooseImage({
  count: 1,
  success: async (res) => {
    const tempFilePath = res.tempFilePaths[0]
    
    const uploadResult = await uniCloud.uploadFile({
      filePath: tempFilePath,
      cloudPath: `images/${Date.now()}.jpg`
    })
    
    console.log('上传成功:', uploadResult.fileID)
  }
})
```

### 2. 文件删除
```javascript
// 云函数中删除文件
await uniCloud.deleteFile({
  fileList: [fileID]
})
```

## uni-id 用户体系

### 1. 用户注册登录
```javascript
// 云函数中
const uniID = require('uni-id')

// 用户注册
const registerResult = await uniID.register({
  username: 'testuser',
  password: '123456',
  mobile: '13800138000'
})

// 用户登录
const loginResult = await uniID.login({
  username: 'testuser',
  password: '123456'
})
```

### 2. 权限验证
```javascript
// 客户端验证登录状态
const checkToken = await uniCloud.callFunction({
  name: 'user-center',
  data: {
    action: 'checkToken'
  }
})

if (checkToken.result.code === 0) {
  console.log('用户已登录')
} else {
  uni.navigateTo({
    url: '/pages/login/login'
  })
}
```

## 官方推荐最佳实践

### 1. 技术选型建议（官方推荐）
根据业务场景选择合适的技术：

1. **以数据库操作为主**：推荐使用 **clientDB**，开发效率最高
2. **复杂业务逻辑 + 数据库操作**：推荐使用 **云对象**（TypeScript优先）
3. **不操作数据库的复杂逻辑**：推荐使用 **云对象**（TypeScript优先）
4. **传统云函数**：不再推荐新项目使用

### 2. 云对象命名和组织规范
- 使用连字符分隔：`user-center`、`data-manage`
- 功能模块化：按业务模块组织
- 一个云对象包含多个相关方法
- **TypeScript文件名**：`index.obj.ts`（推荐）
- **JavaScript文件名**：`index.obj.js`（兼容）

### 3. TypeScript云对象最佳实践
```typescript
// 推荐的TypeScript云对象结构
// uniCloud/cloudfunctions/admin-api/index.obj.ts

// 1. 导入类型定义
import type { Database } from '@dcloudio/types'

// 2. 定义业务类型
interface AdminUser {
  uid: string
  username: string
  role: 'admin' | 'super_admin'
  permissions: string[]
  createTime: number
}

interface CreateUserOptions {
  username: string
  email: string
  role?: 'admin' | 'super_admin'
  permissions?: string[]
}

interface ApiResponse<T = any> {
  errCode: number
  errMsg: string
  data?: T
}

// 3. 导出云对象
module.exports = {
  /**
   * 预处理：统一的权限验证和初始化
   */
  _before(): void {
    this.startTime = Date.now()
    this.currentUser = this.getCloudInfo().uniIdToken
    this.db = uniCloud.database()
    
    // 管理员权限验证
    if (!this.currentUser || !this.currentUser.role?.includes('admin')) {
      throw new Error('需要管理员权限')
    }
  },

  /**
   * 创建管理员用户
   */
  async createAdminUser(options: CreateUserOptions): Promise<ApiResponse<{ uid: string }>> {
    // TypeScript 提供完整的类型检查
    const userData: Omit<AdminUser, 'uid'> = {
      username: options.username,
      role: options.role || 'admin',
      permissions: options.permissions || ['read'],
      createTime: Date.now()
    }

    const result = await this.db.collection('admin_users').add(userData)
    
    return {
      errCode: 0,
      errMsg: 'success',
      data: { uid: result.id }
    }
  },

  /**
   * 获取管理员列表
   */
  async getAdminList(page: number = 1, size: number = 10): Promise<ApiResponse<{
    list: AdminUser[]
    total: number
  }>> {
    const { data } = await this.db.collection('admin_users')
      .skip((page - 1) * size)
      .limit(size)
      .get()

    const { total } = await this.db.collection('admin_users').count()

    return {
      errCode: 0,
      errMsg: 'success',
      data: {
        list: data as AdminUser[],
        total
      }
    }
  }
}
```

### 4. 项目配置推荐
```json
// package.json 依赖配置
{
  "devDependencies": {
    "@dcloudio/types": "latest",
    "@uni-helper/uni-types": "latest",
    "typescript": "^4.9.0"
  }
}
```

```json
// uniCloud TypeScript 配置
// uniCloud/tsconfig.json
{
  "extends": "../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./cloudfunctions",
    "types": ["@dcloudio/types", "@uni-helper/uni-types"]
  },
  "include": [
    "cloudfunctions/**/*.ts"
  ],
  "exclude": [
    "cloudfunctions/**/node_modules"
  ]
}
```

### 2. 数据库设计规范
- 集合名使用下划线：`user_info`、`order_list`
- 字段名使用驼峰：`createTime`、`updateTime`
- 必备字段：`_id`、`create_time`、`update_time`

### 3. 安全规范
- 敏感操作必须在云函数中进行
- 使用数据库安全规则控制数据访问
- 客户端传参数据校验
- 避免在客户端暴露关键信息

### 4. 性能优化和注意事项
- **优先使用云对象**：官方不再推荐传统云函数
- 合理使用数据库索引
- 避免深度嵌套查询
- 使用分页查询处理大量数据
- 云对象保持轻量化，避免长时间运行
- 云对象实例复用，减少初始化开销

### 5. 云对象开发约束

#### 5.1 文件命名约束
- **TypeScript云对象**：入口文件必须是 `index.obj.ts`
- **JavaScript云对象**：入口文件必须是 `index.obj.js`
- **禁止混用**：不能在同一云对象中同时存在 `index.obj.js` 和 `index.obj.ts`

#### 5.2 TypeScript配置要求
```json
// tsconfig.json 配置示例
{
  "compilerOptions": {
    "target": "ES2018",
    "module": "CommonJS",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "types": ["@dcloudio/types"]
  },
  "include": [
    "uniCloud/cloudfunctions/**/*.ts"
  ]
}
```

#### 5.3 通用约束
- **方法约束**：所有 `_` 开头的方法都是私有方法，客户端不可访问
- **导出约束**：云对象的导出方法不可以是箭头函数（会导致this指向错误）
- **参数限制**：
  - 支付宝云：接收参数不超过6MB
  - 阿里云：接收参数不超过2MB  
  - 腾讯云：接收参数不超过5MB

#### 5.4 TypeScript特殊注意事项
- **类型检查**：建议开启strict模式，确保类型安全
- **导入导出**：支持ES6模块语法，但最终编译为CommonJS
- **类型定义**：推荐安装 `@dcloudio/types` 或 `@uni-helper/uni-types`

## 调试和部署

### 1. 本地调试
```bash
# 运行云对象/云函数本地调试
npm run dev:mp-weixin

# 云对象调用示例
const obj = uniCloud.importObject('test-object')
await obj.testMethod()

# 传统云函数调用示例（兼容性）
uniCloud.callFunction({
  name: 'test',
  data: {},
  success: res => console.log(res),
  fail: err => console.error(err)
})
```

### 2. 云端部署
- 使用HBuilderX一键上传云对象/云函数
- 云对象支持热更新，部署更便捷
- 配置定时触发器
- 监控执行情况和性能指标
- 定期备份云数据库

### 3. 迁移指南：从云函数到云对象

#### 3.1 调用方式对比
```javascript
// 旧的云函数方式（不再推荐）
const result = await uniCloud.callFunction({
  name: 'user-center',
  data: {
    action: 'getUserInfo',
    uid: 'user123'
  }
})

// 新的云对象方式（官方推荐）
const userCenter = uniCloud.importObject('user-center')
const result = await userCenter.getUserInfo('user123')
```

#### 3.2 代码结构对比
```javascript
// 传统云函数 - 需要switch分发 (不推荐)
exports.main = async (event, context) => {
  const { action, data } = event
  switch(action) {
    case 'getUserInfo':
      return await getUserInfo(data.uid)
    case 'updateUser': 
      return await updateUser(data.uid, data.info)
    default:
      return { errCode: 'METHOD_NOT_FOUND' }
  }
}

// 云对象 - 直接方法调用 (推荐)
module.exports = {
  async getUserInfo(uid) {
    // 直接实现业务逻辑
  },
  
  async updateUser(uid, info) {
    // 直接实现业务逻辑
  }
}
```

#### 3.3 迁移优势总结
- **代码量减少**：官方示例显示代码行数大幅减少
- **思路更清晰**：直接调用API，不需要传输json接口
- **性能更好**：避免冷启动问题
- **开发效率**：更好的IDE支持和代码提示
- **维护性**：更简单的错误处理和调试
- **类型安全**：完整的TypeScript和JSDoc+支持